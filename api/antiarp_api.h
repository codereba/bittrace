/*
 *
 * Copyright 2010 JiJie Shi
 *
 * This file is part of bittrace.
 *
 * bittrace is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * bittrace is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with bittrace.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
 
 #ifndef __ANTI_ARP_API_H__
#define __ANTI_ARP_API_H__

#define ANTI_ARP_WORK 0
#define ANTI_ARP_NO_WORK 1

#define MAC_ADDR_SIZE ( sizeof( BYTE ) * 6 ) 

#define IOCTL_ANTI_ARP_GET_DATA_PACKET CTL_CODE( FILE_DEVICE_UNKNOWN, 0x911, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_RESET_PACK_QUEUE CTL_CODE( FILE_DEVICE_UNKNOWN, 0x912, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_STOP_PACK_QUEUE CTL_CODE( FILE_DEVICE_UNKNOWN, 0x913, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_DELETE_PACK_QUEUE CTL_CODE( FILE_DEVICE_UNKNOWN, 0x914, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_STOP_PROCESS CTL_CODE( FILE_DEVICE_UNKNOWN, 0x808, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_STOP_THREAD CTL_CODE( FILE_DEVICE_UNKNOWN, 0x809, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_COPY_SENDER_DSTS CTL_CODE( FILE_DEVICE_UNKNOWN, 0x80F, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_OUTPUT_INVALID_ARP_HOSTS CTL_CODE( FILE_DEVICE_UNKNOWN, 0x806, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_GET_GATE_MAC CTL_CODE( FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_RECORDING_NPF_DATA CTL_CODE( FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_START_ARP_FILTER CTL_CODE( FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_STOP_RECORDING_NPF_DATA CTL_CODE( FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_INPUT_ARP_MAC_PAIR CTL_CODE( FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_REMOVE_ARP_MAC_PAIR CTL_CODE( FILE_DEVICE_UNKNOWN, 0x805, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_NOT_IMPLEMENT CTL_CODE( FILE_DEVICE_UNKNOWN, 0x816, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_INPUT_NEW_SENDER CTL_CODE( FILE_DEVICE_UNKNOWN, 0x810, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_TRUNCATE_ARP_HOST_ARRAY CTL_CODE( FILE_DEVICE_UNKNOWN, 0x811, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_SET_VALIDATE_BY_DST_MAC CTL_CODE( FILE_DEVICE_UNKNOWN, 0x812, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_RESET_VALIDATE_BY_DST_MAC CTL_CODE( FILE_DEVICE_UNKNOWN, 0x813, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_HAVE_VALID_ARP_TARGET CTL_CODE( FILE_DEVICE_UNKNOWN, 0x814, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_NOT_HAVE_VALID_ARP_TARGET CTL_CODE( FILE_DEVICE_UNKNOWN, 0x815, METHOD_BUFFERED, FILE_ANY_ACCESS )

#define IOCTL_ANTI_ARP_COPY_ARP_HOST_REF_ARRAY CTL_CODE( FILE_DEVICE_UNKNOWN, 0x817, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_TRUNCATE_ARP_HOST_INFOS CTL_CODE( FILE_DEVICE_UNKNOWN, 0x818, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_INPUT_ARP_SENDER_TARGET_PAIR CTL_CODE( FILE_DEVICE_UNKNOWN, 0x819, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_FIND_HOST_IP CTL_CODE( FILE_DEVICE_UNKNOWN, 0x820, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_INPUT_PROCESS_INFO CTL_CODE( FILE_DEVICE_UNKNOWN, 0x821, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_CLEAN_PROCESS_INFOS CTL_CODE( FILE_DEVICE_UNKNOWN, 0x822, METHOD_BUFFERED, FILE_ANY_ACCESS )

#define IOCTL_ANTI_ARP_UPDATE_SENDER_TARGET_PAIR CTL_CODE( FILE_DEVICE_UNKNOWN, 0x807, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_SET_VALIDATE_SENDER_MAC CTL_CODE( FILE_DEVICE_UNKNOWN, 0x80A, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_RESET_VALIDATE_SENDER_MAC CTL_CODE( FILE_DEVICE_UNKNOWN, 0x80B, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_GET_WORK_MODE CTL_CODE( FILE_DEVICE_UNKNOWN, 0x80C, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_CLEAN_SENDER_TARGET_PAIRS CTL_CODE( FILE_DEVICE_UNKNOWN, 0x80D, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_UPDATE_SENDER_DST_PAIR_ARRAY CTL_CODE( FILE_DEVICE_UNKNOWN, 0x80E, METHOD_BUFFERED, FILE_ANY_ACCESS )

#define IOCTL_ANTI_ARP_OUTPUT_MAC_LIST CTL_CODE( FILE_DEVICE_UNKNOWN, 0x915, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_INITIALIZED CTL_CODE( FILE_DEVICE_UNKNOWN, 0x916, METHOD_BUFFERED, FILE_ANY_ACCESS )
#define IOCTL_ANTI_ARP_SET_WORK_MODE CTL_CODE( FILE_DEVICE_UNKNOWN, 0x917, METHOD_BUFFERED, FILE_ANY_ACCESS )

#pragma warning( push )
#pragma warning( disable:4201 )
#pragma warning( disable:4200 )

#pragma pack( push )
#pragma pack( 1 )

typedef struct __ETHERNET_HDR
{
	BYTE DstAddr[ 6 ]; 
	BYTE SrcAddr[ 6 ]; 
	USHORT Type; 
} ETHERNET_HDR, *PETHERNET_HDR; 

typedef struct _IP_HDR
{
	union 
	{
		BYTE   Version;
		BYTE   HdrLen;
	};
	BYTE ServiceType;
	WORD TotalLen;
	WORD ID;
	union 
	{
		WORD   Flags;
		WORD   FragOff;
	};
	BYTE TimeToLive;
	BYTE Protocol;
	WORD HdrChksum;
	DWORD   SrcAddr;
	DWORD   DstAddr;
	BYTE Options[0];
} IP_HDR, *PIP_HDR;

typedef struct __ARP_HDR
{
	USHORT HdType; 
	USHORT ProtType; 
	BYTE HdSize; 
	BYTE ProtSize; 
	USHORT Opcode; 
	BYTE SenderMacAddr[ 6 ]; 
	ULONG SenderIPAddr; 
	BYTE DstMacAddr[ 6 ]; 
	ULONG DstIPAddr; 
} ARP_HDR, *PARP_HDR; 

typedef struct __ARP_PACK
{
	ETHERNET_HDR EthernetHdr; 
	ARP_HDR ArpHdr; 
} ARP_PACK, *PARP_PACK; 

#define MAX_IP_PACK_MAC_NUM 10
#define MAX_ARP_PACK_MAC_NUM 100

typedef struct __ARP_HOST_MAC_OUTPUT
{
	ULONG HostIP; 
	USHORT ArpMacAddrNum; 
	BYTE ArpMacAddrs[ MAX_ARP_PACK_MAC_NUM ][ MAC_ADDR_SIZE ]; 
} ARP_HOST_MAC_OUTPUT, *PARP_HOST_MAC_OUTPUT; 


typedef struct __ARP_HOST_MAC_LISTS
{
	ULONG AllHostNum; 
	ULONG OutputHostNum; 
	ARP_HOST_MAC_OUTPUT Hosts[ 1 ]; 
} ARP_HOST_MAC_LISTS, *PARP_HOST_MAC_LISTS; 

#pragma pack( pop )
#pragma warning( pop )

#endif //__ANTI_ARP_API_H__